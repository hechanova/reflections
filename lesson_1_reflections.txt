1) How did viewing a diff between two versions of a file help you see the bug 
that was introduced?

Viewing a diff made the search for errors a lot faster.

2) How could having easy access to the entire history of a file make you a 
more efficient programmer in the long term?

Having older versions of my files to revert to will allow me to find errors
more quickly, and I'll lose less time rewriting code if my current file is
corrupted or lost.

3) What do you think are the pros and cons of manually choosing when to create 
a commit, like you do in Git, vs having versions automatically saved, like 
Google docs does?

Automatically saving files runs the risk of prematurely saving a file in the 
middle of a change. Choosing when to save gives me more control over the 
content and frequency of my commits.

4) Why do you think some version control systems, like Git, allow saving 
multiple files in one commit, while others, like Google Docs, treat each file 
separately?

Git works with files that are often interrelated. It's important
that their changes are grouped so they can be reviewed together and reverted
back to if necessary. For systems like Google Docs, it would be unnecessary
to batch-save files. Most of the files that are saved in those types of
systems are independent of each other and thus should be saved individually.

5) How can you use the commands git log and git diff to view the history of 
files?

I can use git log to see a log of commits that have been made, and I can use
git diff to compare commits and see what changes have been made within them. 

6) How might using version control make you more confident to make changes 
that could break something?

Version control gives me the ability to undo mistakes I make by reverting to
previous versions of code. That means I'll always have a version to fall back
on in case something I try doesn't work.

7) Now that you have your workspace set up, what do you want to try using Git 
for?

Working with the code repositories we currently have at my work.
